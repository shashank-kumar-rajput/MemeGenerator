"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var clipboard_copy_1 = __importDefault(require("clipboard-copy"));
var react_1 = require("react");
var useTimedToggle_1 = require("./useTimedToggle");
function isInputLike(node) {
    return node && (node.nodeName === 'TEXTAREA' || node.nodeName === 'INPUT');
}
function useClipboard(options) {
    if (options === void 0) { options = {}; }
    var _a = useTimedToggle_1.useTimedToggle(false), copied = _a[0], toggleCopied = _a[1];
    var targetRef = react_1.useRef(null);
    function clipboardCopy(text) {
        clipboard_copy_1.default(text)
            .then(handleSuccess)
            .catch(handleError);
    }
    function handleSuccess() {
        if (options.onSuccess) {
            options.onSuccess();
        }
        if (options.copiedTimeout) {
            toggleCopied(options.copiedTimeout);
        }
        if (options.selectOnCopy && isInputLike(targetRef.current)) {
            targetRef.current.select();
        }
    }
    function handleError() {
        if (options.onError) {
            options.onError();
        }
        var selectOnError = options.selectOnError !== false;
        if (selectOnError && isInputLike(targetRef.current)) {
            targetRef.current.select();
        }
    }
    function isSupported() {
        return !!(navigator.clipboard ||
            (document.execCommand &&
                document.queryCommandSupported &&
                document.queryCommandSupported('copy')));
    }
    var copyHandler = react_1.useCallback(function (text) {
        if (typeof text === 'string') {
            clipboardCopy(text);
        }
        else if (targetRef.current) {
            clipboardCopy(targetRef.current.value);
        }
    }, []);
    return {
        copied: copied,
        copy: copyHandler,
        isSupported: isSupported,
        target: targetRef,
    };
}
exports.useClipboard = useClipboard;
