{"ast":null,"code":"var _jsxFileName = \"/home/shashank/Downloads/react-meme-master/src/Meme/Meme.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Meme.css\";\nimport { useHistory } from \"react-router-dom\"; // import Footer from \"../components/Footer\";\n\nexport const Meme = () => {\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(captions.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  };\n\n  const generateMeme = () => {\n    const currentMeme = memes[memeIndex];\n    const formData = new FormData();\n    formData.append(\"username\", \"shashank4717\"); // username from imgflip account\n\n    formData.append(\"password\", \"Krishika@2601\"); // password from imgflip account\n\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => {\n      res.json().then(res => {\n        history.push(`/generated?url=${res.data.url}`);\n      });\n    });\n  };\n\n  const shuffleMemes = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => {\n      res.json().then(res => {\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, memes]);\n\n  const nextmethod = () => {\n    /*#__PURE__*/\n    React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: generateMeme,\n      className: \"generate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, \"Generate!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setMemeIndex(memeIndex + 1),\n      className: \"skip\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 3\n      }\n    }, \"Skip\"), captions.map((c, index) => /*#__PURE__*/React.createElement(\"input\", {\n      onChange: e => updateCaption(e, index),\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"meme\",\n      src: memes[memeIndex].url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 3\n      }\n    }));\n  };\n\n  return memes.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: nextmethod(),\n    className: \"generate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"hi shashank memer!\")) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};","map":{"version":3,"sources":["/home/shashank/Downloads/react-meme-master/src/Meme/Meme.js"],"names":["React","useEffect","useState","useHistory","Meme","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","updateCaption","e","index","text","target","value","map","c","i","generateMeme","currentMeme","formData","FormData","append","id","forEach","fetch","method","body","then","res","json","push","data","url","shuffleMemes","array","length","j","Math","floor","random","temp","_memes","Array","box_count","fill","nextmethod"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,YAAP;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CACA;;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMS,OAAO,GAAGR,UAAU,EAA1B;;AAEA,QAAMS,aAAa,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAClC,UAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASC,KAAT,IAAkB,EAA/B;AACAP,IAAAA,WAAW,CACTD,QAAQ,CAACS,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,UAAIN,KAAK,KAAKM,CAAd,EAAiB;AACf,eAAOL,IAAP;AACD,OAFD,MAEO;AACL,eAAOI,CAAP;AACD;AACF,KAND,CADS,CAAX;AASD,GAXD;;AAaA,QAAME,YAAY,GAAG,MAAM;AACzB,UAAMC,WAAW,GAAGjB,KAAK,CAACE,SAAD,CAAzB;AACA,UAAMgB,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AAEAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,cAA5B,EAJyB,CAIoB;;AAC7CF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,eAA5B,EALyB,CAKqB;;AAC9CF,IAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+BH,WAAW,CAACI,EAA3C;AACAjB,IAAAA,QAAQ,CAACkB,OAAT,CAAiB,CAACR,CAAD,EAAIL,KAAJ,KAAcS,QAAQ,CAACE,MAAT,CAAiB,SAAQX,KAAM,SAA/B,EAAyCK,CAAzC,CAA/B;AAEAS,IAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC7CC,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,IAAI,EAAEP;AAFuC,KAA1C,CAAL,CAGGQ,IAHH,CAGSC,GAAD,IAAS;AACfA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBC,GAAD,IAAS;AACvBrB,QAAAA,OAAO,CAACuB,IAAR,CAAc,kBAAiBF,GAAG,CAACG,IAAJ,CAASC,GAAI,EAA5C;AACD,OAFD;AAGD,KAPD;AAQD,GAjBD;;AAmBA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,SAAK,IAAIlB,CAAC,GAAGkB,KAAK,CAACC,MAAN,GAAe,CAA5B,EAA+BnB,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,YAAMoB,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBvB,CAA3B,CAAV;AACA,YAAMwB,IAAI,GAAGN,KAAK,CAAClB,CAAD,CAAlB;AACAkB,MAAAA,KAAK,CAAClB,CAAD,CAAL,GAAWkB,KAAK,CAACE,CAAD,CAAhB;AACAF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAWI,IAAX;AACD;AACF,GAPD;;AASA3C,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,KAAK,CAAC,mCAAD,CAAL,CAA2CG,IAA3C,CAAiDC,GAAD,IAAS;AACvDA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAiBC,GAAD,IAAS;AACvB,cAAMa,MAAM,GAAGb,GAAG,CAACG,IAAJ,CAAS9B,KAAxB;AACAgC,QAAAA,YAAY,CAACQ,MAAD,CAAZ;AACAvC,QAAAA,QAAQ,CAACuC,MAAD,CAAR;AACD,OAJD;AAKD,KAND;AAOD,GARQ,EAQN,EARM,CAAT;AAUA5C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,CAACkC,MAAV,EAAkB;AAChB7B,MAAAA,WAAW,CAACoC,KAAK,CAACzC,KAAK,CAACE,SAAD,CAAL,CAAiBwC,SAAlB,CAAL,CAAkCC,IAAlC,CAAuC,EAAvC,CAAD,CAAX;AACD;AACF,GAJQ,EAIN,CAACzC,SAAD,EAAYF,KAAZ,CAJM,CAAT;;AAKA,QAAM4C,UAAU,GAAC,MAAI;AAEvB;AAAA,2DACI;AAAQ,MAAA,OAAO,EAAE5B,YAAjB;AAA+B,MAAA,SAAS,EAAC,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,eAIE;AAAQ,MAAA,OAAO,EAAE,MAAMb,YAAY,CAACD,SAAS,GAAG,CAAb,CAAnC;AAAoD,MAAA,SAAS,EAAC,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAOGE,QAAQ,CAACS,GAAT,CAAa,CAACC,CAAD,EAAIL,KAAJ,kBACZ;AAAO,MAAA,QAAQ,EAAGD,CAAD,IAAOD,aAAa,CAACC,CAAD,EAAIC,KAAJ,CAArC;AAAiD,MAAA,GAAG,EAAEA,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAPH,eAUE;AAAK,MAAA,GAAG,EAAC,MAAT;AAAgB,MAAA,GAAG,EAAET,KAAK,CAACE,SAAD,CAAL,CAAiB6B,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF;AAaG,GAfD;;AAiBA,SAAO/B,KAAK,CAACkC,MAAN,gBACL;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEU,UAAU,EAA3B;AAA+B,IAAA,SAAS,EAAC,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADK,gBAQL,yCARF;AAUD,CA1FM","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Meme.css\";\nimport { useHistory } from \"react-router-dom\";\n// import Footer from \"../components/Footer\";\n\nexport const Meme = () => {\n  const [memes, setMemes] = useState([]);\n  const [memeIndex, setMemeIndex] = useState(0);\n  const [captions, setCaptions] = useState([]);\n\n  const history = useHistory();\n\n  const updateCaption = (e, index) => {\n    const text = e.target.value || \"\";\n    setCaptions(\n      captions.map((c, i) => {\n        if (index === i) {\n          return text;\n        } else {\n          return c;\n        }\n      })\n    );\n  };\n\n  const generateMeme = () => {\n    const currentMeme = memes[memeIndex];\n    const formData = new FormData();\n\n    formData.append(\"username\", \"shashank4717\"); // username from imgflip account\n    formData.append(\"password\", \"Krishika@2601\"); // password from imgflip account\n    formData.append(\"template_id\", currentMeme.id);\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData,\n    }).then((res) => {\n      res.json().then((res) => {\n        history.push(`/generated?url=${res.data.url}`);\n      });\n    });\n  };\n\n  const shuffleMemes = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((res) => {\n      res.json().then((res) => {\n        const _memes = res.data.memes;\n        shuffleMemes(_memes);\n        setMemes(_memes);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if (memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\n    }\n  }, [memeIndex, memes]);\n  const nextmethod=()=>{\n    \n<>\n    <button onClick={generateMeme} className=\"generate\">\n    Generate!\n  </button>\n  <button onClick={() => setMemeIndex(memeIndex + 1)} className=\"skip\">\n    Skip\n  </button>\n  {captions.map((c, index) => (\n    <input onChange={(e) => updateCaption(e, index)} key={index} />\n  ))}\n  <img alt=\"meme\" src={memes[memeIndex].url} />\n  {/* <Footer /> */}\n  </>\n  }\n\n  return memes.length ? (\n    <div className=\"container\">\n      <button onClick={nextmethod()} className=\"generate\">\n        hi shashank memer!\n      </button>\n     \n    </div>\n  ) : (\n    <></>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}